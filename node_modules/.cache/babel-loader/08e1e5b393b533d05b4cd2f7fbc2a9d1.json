{"ast":null,"code":"import { createStore } from \"redux\";\nimport { combineReducers } from 'redux';\nlet initialState = {\n  data: [],\n  notifications: {\n    liked: 0,\n    cart: 0\n  }\n};\nlet cartState = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"ADD\":\n      return {\n        ...state,\n        data: [...state.data, {\n          product: action.payload,\n          count: action.count\n        }]\n      };\n    case \"UPDATE-\":\n      let subArray = state.data.map((item, i) => {\n        if (i == action.id) {\n          return {\n            ...item,\n            count: state.data[action.id].count - 1\n          };\n        } else {\n          return {\n            ...item\n          };\n        }\n      });\n      return {\n        ...state.data,\n        data: subArray\n      };\n    case \"UPDATE+\":\n      let addArray = state.data.map((item, i) => {\n        if (i == action.id) {\n          return {\n            ...item,\n            count: state.data[action.id].count + 1\n          };\n        } else {\n          return {\n            ...item\n          };\n        }\n      });\n      return {\n        ...state.data,\n        data: addArray\n      };\n    case \"DELETE\":\n      return {\n        ...state,\n        data: state.data.filter(item => {\n          return item != action.payload;\n        })\n      };\n    default:\n      return state;\n  }\n};\nlet notifyState = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n};\nlet reducer = combineReducers({\n  cartState,\n  notifyState\n});\nlet store = createStore(reducer);\nexport default store;","map":{"version":3,"names":["createStore","combineReducers","initialState","data","notifications","liked","cart","cartState","state","action","type","product","payload","count","subArray","map","item","i","id","addArray","filter","notifyState","reducer","store"],"sources":["/home/adib/code/rhino_production/rhino/rhino-front/rhino/src/CartState.js"],"sourcesContent":["import { createStore } from \"redux\";\nimport { combineReducers } from 'redux'\nlet initialState = {\n\t                  data:[],\n\t                  notifications:{\n                         liked:0,\n                         cart:0,\n\t                  }\n\n                   \n }\nlet cartState=(state=initialState,action)=>{\n\tswitch(action.type){\n\tcase \"ADD\": return {\n\t\t\n\t\t...state,\n\t\tdata:[...state.data ,\n\t\t           {\n\t\t           \t  \n\t\t               \tproduct:action.payload,\n\t\t               \tcount:action.count,\n\t\t           }\n                            \n\t\t\t ]\n\n\t}\n\tcase \"UPDATE-\": \n        let subArray = state.data.map((item,i)=>{\n        \tif(i==action.id){\n        \t\treturn{\n                   ...item,\n                   count:state.data[action.id].count-1,\n        \t\t}\n        \t}\n        \telse{\n        \t\treturn{\n        \t\t\t...item\n        \t\t}\n        \t}\n        })\n        return{\n        \t...state.data,\n        \tdata:subArray\n        }\n\n     case \"UPDATE+\": \n        let addArray = state.data.map((item,i)=>{\n        \tif(i==action.id){\n        \t\treturn{\n                   ...item,\n                   count:state.data[action.id].count+1,\n        \t\t}\n        \t}\n        \telse{\n        \t\treturn{\n        \t\t\t...item\n        \t\t}\n        \t}\n        })\n        return{\n        \t...state.data,\n        \tdata:addArray\n        }\n     case \"DELETE\":\n     \t return{\n     \t \t...state,\n     \t \tdata:state.data.filter((item)=>{\n     \t \t\treturn item!=action.payload\n     \t \t})\n     \t }\n\t\t\n\t\t\n\n    default: return state\n\t}\n    \n\n\n\n}\n\nlet notifyState=(state=initialState,action)=>{\n\n\n\n}\nlet reducer = combineReducers({cartState,notifyState})\nlet store = createStore(reducer)\n\nexport default store"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,eAAe,QAAQ,OAAO;AACvC,IAAIC,YAAY,GAAG;EACAC,IAAI,EAAC,EAAE;EACPC,aAAa,EAAC;IACRC,KAAK,EAAC,CAAC;IACPC,IAAI,EAAC;EACX;AAGlB,CAAC;AACF,IAAIC,SAAS,GAAC,YAA6B;EAAA,IAA5BC,KAAK,uEAACN,YAAY;EAAA,IAACO,MAAM;EACvC,QAAOA,MAAM,CAACC,IAAI;IAClB,KAAK,KAAK;MAAE,OAAO;QAElB,GAAGF,KAAK;QACRL,IAAI,EAAC,CAAC,GAAGK,KAAK,CAACL,IAAI,EACR;UAEKQ,OAAO,EAACF,MAAM,CAACG,OAAO;UACtBC,KAAK,EAACJ,MAAM,CAACI;QAClB,CAAC;MAIb,CAAC;IACD,KAAK,SAAS;MACP,IAAIC,QAAQ,GAAGN,KAAK,CAACL,IAAI,CAACY,GAAG,CAAC,CAACC,IAAI,EAACC,CAAC,KAAG;QACvC,IAAGA,CAAC,IAAER,MAAM,CAACS,EAAE,EAAC;UACf,OAAM;YACG,GAAGF,IAAI;YACPH,KAAK,EAACL,KAAK,CAACL,IAAI,CAACM,MAAM,CAACS,EAAE,CAAC,CAACL,KAAK,GAAC;UAC3C,CAAC;QACF,CAAC,MACG;UACH,OAAM;YACL,GAAGG;UACJ,CAAC;QACF;MACD,CAAC,CAAC;MACF,OAAM;QACL,GAAGR,KAAK,CAACL,IAAI;QACbA,IAAI,EAACW;MACN,CAAC;IAEJ,KAAK,SAAS;MACX,IAAIK,QAAQ,GAAGX,KAAK,CAACL,IAAI,CAACY,GAAG,CAAC,CAACC,IAAI,EAACC,CAAC,KAAG;QACvC,IAAGA,CAAC,IAAER,MAAM,CAACS,EAAE,EAAC;UACf,OAAM;YACG,GAAGF,IAAI;YACPH,KAAK,EAACL,KAAK,CAACL,IAAI,CAACM,MAAM,CAACS,EAAE,CAAC,CAACL,KAAK,GAAC;UAC3C,CAAC;QACF,CAAC,MACG;UACH,OAAM;YACL,GAAGG;UACJ,CAAC;QACF;MACD,CAAC,CAAC;MACF,OAAM;QACL,GAAGR,KAAK,CAACL,IAAI;QACbA,IAAI,EAACgB;MACN,CAAC;IACJ,KAAK,QAAQ;MACX,OAAM;QACL,GAAGX,KAAK;QACRL,IAAI,EAACK,KAAK,CAACL,IAAI,CAACiB,MAAM,CAAEJ,IAAI,IAAG;UAC9B,OAAOA,IAAI,IAAEP,MAAM,CAACG,OAAO;QAC5B,CAAC;MACF,CAAC;IAIJ;MAAS,OAAOJ,KAAK;EAAA;AAMzB,CAAC;AAED,IAAIa,WAAW,GAAC,YAA6B;EAAA,IAA5Bb,KAAK,uEAACN,YAAY;EAAA,IAACO,MAAM;AAI1C,CAAC;AACD,IAAIa,OAAO,GAAGrB,eAAe,CAAC;EAACM,SAAS;EAACc;AAAW,CAAC,CAAC;AACtD,IAAIE,KAAK,GAAGvB,WAAW,CAACsB,OAAO,CAAC;AAEhC,eAAeC,KAAK"},"metadata":{},"sourceType":"module"}